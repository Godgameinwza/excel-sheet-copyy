import os
import customtkinter as ctk
from tkinter import filedialog, messagebox
from openpyxl import load_workbook

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ---
def load_template_values():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Sheet ‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô input"""
    file_path = file_path_entry.get()
    base_sheet = base_entry.get()
    
    if not file_path or not base_sheet:
        messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ Sheet ‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô")
        return
    
    if not os.path.exists(file_path):
        messagebox.showerror("‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        return
    
    try:
        wb = load_workbook(file_path, data_only=True)
        if base_sheet not in wb.sheetnames:
            messagebox.showerror("‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet", f"‡πÑ‡∏°‡πà‡∏û‡∏ö sheet '{base_sheet}' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ")
            wb.close()
            return
        
        ws = wb[base_sheet]
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å cell I3 ‡πÅ‡∏•‡∏∞ J11
        num_val = ws["I3"].value
        date_val = ws["J11"].value
        month_val = ws["B18"].value
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô input
        num_entry.delete(0, 'end')
        if num_val:
            num_entry.insert(0, str(num_val))
        
        date_entry.delete(0, 'end')
        if date_val:
            date_entry.insert(0, str(date_val))

        month_entry.delete(0, 'end')
        if month_val:
            month_entry.insert(0, str(month_val))
        
        wb.close()
        
    except Exception as e:
        messagebox.showerror("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ:\n{str(e)}")

def select_file():
    file = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
    if file:
        file_path_entry.delete(0, 'end')
        file_path_entry.insert(0, file)

def validate_sheet_name(name):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠ Sheet ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏Ç‡∏≠‡∏á Excel"""
    if not name or len(name) > 31:
        return False, "‡∏ä‡∏∑‡πà‡∏≠ Sheet ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 1-31 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"
    
    invalid_chars = ['\\', '/', '*', '?', ':', '[', ']']
    for char in invalid_chars:
        if char in name:
            return False, f"‡∏ä‡∏∑‡πà‡∏≠ Sheet ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©: \\ / * ? : [ ]"
    
    return True, ""

def clear_inputs():
    """‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á input ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
    new_entry.delete(0, 'end')
    num_entry.delete(0, 'end')
    date_entry.delete(0, 'end')
    month_entry.delete(0, 'end')

def add_sheet_to_file():
    file_path = file_path_entry.get()
    base_sheet = base_entry.get()
    new_sheet = new_entry.get().strip()
    num_value = num_entry.get()
    date_value = date_entry.get()
    month_value = month_entry.get()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    if not file_path or not base_sheet or not new_sheet:
        messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
        return

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
    if not os.path.exists(file_path):
        messagebox.showerror("‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        return

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠ Sheet ‡πÉ‡∏´‡∏°‡πà
    is_valid, error_msg = validate_sheet_name(new_sheet)
    if not is_valid:
        messagebox.showerror("‡∏ä‡∏∑‡πà‡∏≠ Sheet ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", error_msg)
        return

    try:
        wb = load_workbook(file_path)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Sheet ‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if base_sheet not in wb.sheetnames:
            messagebox.showerror("‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet", f"‡πÑ‡∏°‡πà‡∏û‡∏ö sheet '{base_sheet}' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ")
            return

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Sheet ‡πÉ‡∏´‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if new_sheet in wb.sheetnames:
            result = messagebox.askyesno("Sheet ‡∏ã‡πâ‡∏≥", f"‡∏°‡∏µ Sheet '{new_sheet}' ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
            if result:
                del wb[new_sheet]
            else:
                return

        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Sheet
        template = wb[base_sheet]
        new_ws = wb.copy_worksheet(template)
        new_ws.title = new_sheet
        
        # ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÄ‡∏ã‡∏•‡∏•‡πå
        if num_value:
            new_ws["I3"] = num_value
        if date_value:
            new_ws["J11"] = date_value
        if month_value:
            new_ws["B18"] = month_value

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        wb.save(file_path)
        wb.close()
        
        messagebox.showinfo("‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", f"‡πÄ‡∏û‡∏¥‡πà‡∏° Sheet '{new_sheet}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        clear_inputs()
        
    except PermissionError:
        messagebox.showerror("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ", "‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
    except Exception as e:
        messagebox.showerror("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", str(e))

# --- UI ---
ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")

root = ctk.CTk()
root.title("üìÑ Excel Sheet Copier")
root.geometry("550x650")
root.resizable(False, False)

frame = ctk.CTkFrame(root, corner_radius=15)
frame.pack(padx=20, pady=20, fill="both", expand=True)

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
ctk.CTkLabel(frame, text="üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel", font=("Arial", 14, "bold")).pack(pady=(10, 5))
file_path_entry = ctk.CTkEntry(frame, width=400)
file_path_entry.pack(pady=5)
ctk.CTkButton(frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", command=select_file).pack(pady=5)

# Sheet ‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö + ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î
ctk.CTkLabel(frame, text="üìë ‡∏ä‡∏∑‡πà‡∏≠ Sheet ‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö", font=("Arial", 12)).pack(pady=(10, 5))
base_frame = ctk.CTkFrame(frame, fg_color="transparent")
base_frame.pack(pady=5)
base_entry = ctk.CTkEntry(base_frame, width=240)
base_entry.pack(side="left", padx=(0, 5))
ctk.CTkButton(base_frame, text="üîÑ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°", command=load_template_values, width=140, fg_color="#2196F3").pack(side="left")

# Sheet ‡πÉ‡∏´‡∏°‡πà
ctk.CTkLabel(frame, text="‚ûï ‡∏ä‡∏∑‡πà‡∏≠ Sheet ‡πÉ‡∏´‡∏°‡πà", font=("Arial", 12)).pack(pady=(10, 5))
new_entry = ctk.CTkEntry(frame, width=300)
new_entry.pack(pady=5)

# ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà I3
ctk.CTkLabel(frame, text="üî¢ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà (I3)", font=("Arial", 12)).pack(pady=(10, 5))
num_entry = ctk.CTkEntry(frame, width=300, placeholder_text="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î '‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
num_entry.pack(pady=5)

# Date J11
ctk.CTkLabel(frame, text="üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (J11)", font=("Arial", 12)).pack(pady=(10, 5))
date_entry = ctk.CTkEntry(frame, width=300, placeholder_text="‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î '‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
date_entry.pack(pady=5)

ctk.CTkLabel(frame, text="üìÖ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (B18)", font=("Arial", 12)).pack(pady=(10, 5))
month_entry = ctk.CTkEntry(frame, width=300, placeholder_text="‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î '‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
month_entry.pack(pady=5)

# ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° Sheet
ctk.CTkButton(frame, text="‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° Sheet", command=add_sheet_to_file, fg_color="#4CAF50", height=40, font=("Arial", 13, "bold")).pack(pady=20)

root.mainloop()